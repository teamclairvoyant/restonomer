"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8144],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},i="Config Variables",l={unversionedId:"restonomer_context/config_variables",id:"restonomer_context/config_variables",title:"Config Variables",description:"While providing the checkpoint configuration, there may come a situation where you would not want to provide a static",source:"@site/docs/restonomer_context/config_variables.md",sourceDirName:"restonomer_context",slug:"/restonomer_context/config_variables",permalink:"/restonomer/docs/restonomer_context/config_variables",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Application Configurations",permalink:"/restonomer/docs/restonomer_context/application_configurations"},next:{title:"Run single checkpoint",permalink:"/restonomer/docs/running_checkpoints/run_single_checkpoint"}},s={},p=[],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"config-variables"},"Config Variables"),(0,a.kt)("p",null,"While providing the checkpoint configuration, there may come a situation where you would not want to provide a static\nvalue for any particular field but rather want to provide some dynamic value which is passed on to the application\nat runtime. Here comes config variables to the rescue."),(0,a.kt)("p",null,"The config variables are denoted like ",(0,a.kt)("inlineCode",{parentName:"p"},"${<config_variable>}")),(0,a.kt)("p",null,"Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"${BASIC_AUTH_TOKEN}")),(0,a.kt)("p",null,"Below is the sample checkpoint configuration using config variables:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hocon"},'name = "sample_postman_checkpoint"\n\ntoken = {\n  token-request = {\n    url = "http://localhost:8080/token-response-body"\n\n    authentication = {\n      type = "BearerAuthentication"\n      bearer-token = "test_token_123"\n    }\n  }\n\n  token-response-placeholder = "ResponseBody"\n}\n\ndata = {\n  data-request = {\n    url = "https://postman-echo.com/basic-auth"\n\n    authentication = {\n      type = "BasicAuthentication"\n      user-name = "postman"\n      password = ${BASIC_AUTH_TOKEN}\n    }\n  }\n\n  data-response = {\n    body = {\n      type = "Text"\n      text-format = {\n        type = "JSONTextFormat"\n      }\n    }\n\n    persistence = {\n      type = "LocalFileSystem"\n      file-format = {\n        type = "ParquetFileFormat"\n      }\n      file-path = "./rest-output/"\n    }\n  }\n}\n')),(0,a.kt)("p",null,"There are three ways of substituting the config variables by their actual values at runtime:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Config variables from file:")),(0,a.kt)("p",{parentName:"li"},"You can provide config variable and its value in ",(0,a.kt)("inlineCode",{parentName:"p"},"config_variables.conf")," file kept in ",(0,a.kt)("inlineCode",{parentName:"p"},"uncommitted")," folder under\nrestonomer context directory."),(0,a.kt)("p",{parentName:"li"},"  Below is the sample ",(0,a.kt)("inlineCode",{parentName:"p"},"config_variables.conf")," file content:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-hocon"},'BASIC_AUTH_TOKEN = "token1234"\nBEARER_AUTH_TOKEN = "token5678"\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Config variables from application arguments:")),(0,a.kt)("p",{parentName:"li"},"You can provide a list of key-value pairs as a map to the restonomer context instance:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import com.clairvoyant.restonomer.core.app.RestonomerContext\n\nobject RestonomerApp extends App {\n  val configVariables = Map(\n    "BASIC_AUTH_TOKEN" -> "token1234",\n    "BEARER_AUTH_TOKEN" -> "token5678"\n  )\n\n  private val restonomerContext = RestonomerContext(\n    configVariablesFromApplicationArgs = configVariables\n  )\n\n  restonomerContext.runAllCheckpoints()\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Environment Variables:")),(0,a.kt)("p",{parentName:"li"},"You can provide config variable and its value by setting it in environment variable before running the application."))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"CONFIG VARIABLES SUBSTITUTION PRIORITY")),(0,a.kt)("p",null,"The restonomer application first looks for the substitute value in the config variables from file ",(0,a.kt)("inlineCode",{parentName:"p"},"config_variables.conf"),".\nIf the value is not present over there, then it starts looking for the value in the config variables from application arguments.\nIf the value is still not present, then the application looks at the environment variables."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Config variables from file > Config variables from application args > Environment variables\n")),(0,a.kt)("p",null,"In case the value is not present in any of the above three options, then the value is not substituted and the application reads\nthe checkpoint configuration the same way it is provided without any substitution."))}m.isMDXComponent=!0}}]);