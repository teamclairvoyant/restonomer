"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=i(n),f=o,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||a;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[m]="string"==typeof e?e:o,l[1]=c;for(var i=2;i<a;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9706:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const a={},l="Coalesce Columns",c={unversionedId:"transformation/coalesce_columns",id:"transformation/coalesce_columns",title:"Coalesce Columns",description:"It lets the user create a new field with the value being formed by getting the first non null value from the list of columns provided by the user.",source:"@site/docs/transformation/coalesce_columns.md",sourceDirName:"transformation",slug:"/transformation/coalesce_columns",permalink:"/restonomer/docs/transformation/coalesce_columns",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Change Column Case",permalink:"/restonomer/docs/transformation/change_column_case"},next:{title:"Concat Columns",permalink:"/restonomer/docs/transformation/concat_columns"}},s={},i=[],u={toc:i},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"coalesce-columns"},"Coalesce Columns"),(0,o.kt)("p",null,"It lets the user create a new field with the value being formed by getting the first non null value from the list of columns provided by the user."),(0,o.kt)("p",null,"This transformation expects user to provide below inputs:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Input Arguments"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Mandatory"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Default Value"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"new-column-name"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,o.kt)("td",{parentName:"tr",align:"center"},"-"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The name of new column to be created.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"columns-to-coalesce"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,o.kt)("td",{parentName:"tr",align:"center"},"-"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The list of columns to perform coalesce operation on.")))),(0,o.kt)("p",null,"For example, consider we have below restonomer response in json:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "col_A": null,\n  "col_B": "Pune",\n  "col_C": null\n}\n')),(0,o.kt)("p",null,"Now, suppose the requirement is to create a new column ",(0,o.kt)("inlineCode",{parentName:"p"},"col_D")," having the value which is equal to the first non null value from the list of columns ",(0,o.kt)("inlineCode",{parentName:"p"},"col_A"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"col_B")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"col_C"),".\nThen, user can configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"CoalesceColumns")," transformation in the below manner:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hocon"},'{\n  type = "CoalesceColumns"\n  new-column-name = "col_D"\n  columns-to-coalesce = ["col_A", "col_B", "col_C"]\n}\n')),(0,o.kt)("p",null,"The transformed response will now have the ",(0,o.kt)("inlineCode",{parentName:"p"},"col_D")," field as below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "col_A": null,\n  "col_B": "Pune",\n  "col_C": null,\n  "col_D": "Pune"\n}\n')))}p.isMDXComponent=!0}}]);