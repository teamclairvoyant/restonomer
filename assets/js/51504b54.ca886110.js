"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9778],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>g});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},m=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},f=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),d=p(a),f=r,g=d["".concat(s,".").concat(f)]||d[f]||c[f]||o;return a?n.createElement(g,l(l({ref:e},m),{},{components:a})):n.createElement(g,l({ref:e},m))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,l=new Array(o);l[0]=f;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[d]="string"==typeof t?t:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},4954:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={},l="JSON",i={unversionedId:"response_body/text/json_text",id:"response_body/text/json_text",title:"JSON",description:"Restonomer can parse the api response of text type in JSON format. User need to configure the checkpoint in below",source:"@site/docs/response_body/text/json_text.md",sourceDirName:"response_body/text",slug:"/response_body/text/json_text",permalink:"/restonomer/docs/response_body/text/json_text",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTML Table",permalink:"/restonomer/docs/response_body/text/html_text"},next:{title:"XML",permalink:"/restonomer/docs/response_body/text/xml_text"}},s={},p=[{value:"Compression",id:"compression",level:2},{value:"JSON Text Format Configurations",id:"json-text-format-configurations",level:2}],m={toc:p},d="wrapper";function c(t){let{components:e,...a}=t;return(0,r.kt)(d,(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"json"},"JSON"),(0,r.kt)("p",null,"Restonomer can parse the api response of text type in JSON format. User need to configure the checkpoint in below\nformat:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-hocon"},'name = "checkpoint_json_response_dataframe_converter"\n\ndata = {\n  data-request = {\n    url = "http://localhost:8080/json-response-converter"\n  }\n\n  data-response = {\n    body = {\n      type = "Text"\n      text-format = {\n        type = "JSONTextFormat"\n        primitives-as-string = true\n      }\n    }\n\n    persistence = {\n      type = "LocalFileSystem"\n      file-format = {\n        type = "ParquetFileFormat"\n      }\n      file-path = "/tmp/response_body"\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"compression"},"Compression"),(0,r.kt)("p",null,"In case the json text that is returned by the api is compressed, user can configure the checkpoint in below format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-hocon"},'name = "checkpoint_json_response_dataframe_converter"\n\ndata = {\n  data-request = {\n    url = "http://localhost:8080/json-response-converter"\n  }\n\n  data-response = {\n    body = {\n      type = "Text"\n      compression = "GZIP"\n      text-format = {\n        type = "JSONTextFormat"\n        primitives-as-string = true\n      }\n    }\n\n    persistence = {\n      type = "LocalFileSystem"\n      file-format = {\n        type = "ParquetFileFormat"\n      }\n      file-path = "/tmp/response_body"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"As of now, restonomer supports only ",(0,r.kt)("inlineCode",{parentName:"p"},"GZIP")," compression format."),(0,r.kt)("h2",{id:"json-text-format-configurations"},"JSON Text Format Configurations"),(0,r.kt)("p",null,"Just like ",(0,r.kt)("inlineCode",{parentName:"p"},"primitives-as-string"),", user can configure below other properties for JSON text format that will help\nrestonomer for parsing:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"allow-backslash-escaping-any-character"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows accepting quoting of all character using backslash quoting mechanism.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"allow-comments"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Ignores Java/C++ style comment in JSON records.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"allow-non-numeric-numbers"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows JSON parser to recognize set of \u201cNot-a-Number\u201d (NaN) tokens as legal floating number values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"allow-numeric-leading-zeros"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows leading zeros in numbers (e.g. 00012).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"allow-single-quotes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows single quotes in addition to double quotes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"allow-unquoted-control-chars"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows JSON Strings to contain unquoted control characters ",(0,r.kt)("br",null),"(ASCII characters with a value less than 32, including tab and line feed characters) or not.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"allow-unquoted-field-names"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows unquoted JSON field names.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"column-name-of-corrupt-record"),(0,r.kt)("td",{parentName:"tr",align:"center"},"_corrupt_record"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows renaming the new field having malformed string created by PERMISSIVE mode. This overrides spark.sql.columnNameOfCorruptRecord.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"data-column-name"),(0,r.kt)("td",{parentName:"tr",align:"center"},"None"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The name of the column that actually contains the dataset. If present, the API will only parse the dataset of this column to the dataframe.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"date-format"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yyyy-MM-dd"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets the string that indicates a date format.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"drop-field-if-all-null"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to ignore columns of all null values or empty arrays during schema inference.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"enable-date-time-parsing-fallback"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows falling back to the backward compatible (Spark 1.x and 2.0) behavior of parsing dates and timestamps ",(0,r.kt)("br",null),"if values do not match the set patterns.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"encoding"),(0,r.kt)("td",{parentName:"tr",align:"center"},"UTF-8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Decodes the JSON files by the given encoding type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"infer-schema"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Infers the input schema automatically from data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"line-sep"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\\n"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Defines the line separator that should be used for parsing. Maximum length is 1 character.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"locale"),(0,r.kt)("td",{parentName:"tr",align:"center"},"en-US"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets a locale as a language tag in IETF BCP 47 format. For instance, this is used while parsing dates and timestamps.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"mode"),(0,r.kt)("td",{parentName:"tr",align:"center"},"FAILFAST"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allows a mode for dealing with corrupt records during parsing. Allowed values are PERMISSIVE, DROPMALFORMED, and FAILFAST.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"multi-line"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Parse one record, which may span multiple lines, per file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"prefers-decimal"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Infers all floating-point values as a decimal type. If the values do not fit in decimal, then it infers them as doubles.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"primitives-as-string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Infers all primitive values as a string type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"sampling-ratio"),(0,r.kt)("td",{parentName:"tr",align:"center"},"1.0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Defines the fraction of rows used for schema inferring.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"timestamp-format"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yyyy-MM-dd HH:mm:ss"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets the string that indicates a timestamp format.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"timestamp-ntz-format"),(0,r.kt)("td",{parentName:"tr",align:"center"},"yyyy-MM-dd'T'HH:mm:ss","[.SSS]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets the string that indicates a timestamp without timezone format.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"time-zone"),(0,r.kt)("td",{parentName:"tr",align:"center"},"UTC"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets the string that indicates a time zone ID to be used to format timestamps in the JSON datasources or partition values.")))))}c.isMDXComponent=!0}}]);