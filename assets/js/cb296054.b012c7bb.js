"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[884],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=i(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const o={},l="Cast Columns",s={unversionedId:"transformation/cast_columns",id:"transformation/cast_columns",title:"Cast Columns",description:"It lets the user cast the data type of multiple columns to the desired different types at once.",source:"@site/docs/transformation/cast_columns.md",sourceDirName:"transformation",slug:"/transformation/cast_columns",permalink:"/restonomer/docs/transformation/cast_columns",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add Suffix To Column Names",permalink:"/restonomer/docs/transformation/add_suffix_to_column_names"},next:{title:"Cast Columns Based On Prefix",permalink:"/restonomer/docs/transformation/cast_columns_based_on_prefix"}},c={},i=[],p={toc:i},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cast-columns"},"Cast Columns"),(0,a.kt)("p",null,"It lets the user cast the data type of multiple columns to the desired different types at once."),(0,a.kt)("p",null,"This transformation expects user to provide below inputs:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Input Arguments"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Mandatory"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"column-data-type-mapper"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,a.kt)("td",{parentName:"tr",align:"center"},"-"),(0,a.kt)("td",{parentName:"tr",align:"left"},"It defines the mapping of column to its desired data type")))),(0,a.kt)("p",null,"For example, consider we have below restonomer response in json:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "col_A": 5,\n  "col_B": 4,\n  "col_C": 3.4678,\n  "col_D": "1990-07-23 10:20:30",\n  "col_E": "23-07-1990 10:20:30",\n  "col_F": "1990-07-23",\n  "col_G": "23-07-1990"\n}\n')),(0,a.kt)("p",null,"Now, suppose the requirement is to cast above columns into below data types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"col_A -> string\ncol_B -> double\ncol_C -> decimal type with precision 19 and scale 2\ncol_D -> TimestampType\ncol_E -> TimestampType\ncol_F -> DateType\ncol_G -> DateType\n")),(0,a.kt)("p",null,"Then, user can configure the ",(0,a.kt)("inlineCode",{parentName:"p"},"CastColumns")," transformation in the below manner:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hocon"},'{\n  type = "CastColumns"\n  column-data-type-mapper = {\n    "col_A" = "string"\n    "col_B" = "double"\n    "col_C" = "decimal(19,2)"\n    "col_D" = "timestamp"\n    "col_E" = "timestamp(dd-MM-yyyy HH:mm:ss)"\n    "col_F" = "date"\n    "col_G" = "date(dd-MM-yyyy)"\n  }\n}\n')),(0,a.kt)("p",null,"The transformed response will now have the columns with the desired data types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "col_A": "5",\n  "col_B": 4.0,\n  "col_C": 3.47,\n  "col_D": "1990-07-23 10:20:30",\n  "col_E": "1990-07-23 10:20:30",\n  "col_F": "1990-07-23",\n  "col_G": "1990-07-23"\n}\n')))}u.isMDXComponent=!0}}]);