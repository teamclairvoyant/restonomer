"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4604],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(a),u=n,g=c["".concat(p,".").concat(u)]||c[u]||m[u]||i;return a?r.createElement(g,o(o({ref:t},d),{},{components:a})):r.createElement(g,o({ref:t},d))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7837:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const i={},o="BigQuery",l={unversionedId:"persistence/gcp_bigquery_persistence",id:"persistence/gcp_bigquery_persistence",title:"BigQuery",description:"User can use BigQuery persistence to write/persist spark dataframe to google cloud BigQuery table.",source:"@site/docs/persistence/gcp_bigquery_persistence.md",sourceDirName:"persistence",slug:"/persistence/gcp_bigquery_persistence",permalink:"/restonomer/docs/persistence/gcp_bigquery_persistence",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LocalFileSystem",permalink:"/restonomer/docs/persistence/file_system_persistence"},next:{title:"GCSBucket",permalink:"/restonomer/docs/persistence/gcs_bucket_persistence"}},p={},s=[{value:"Direct Write",id:"direct-write",level:2},{value:"Indirect Write",id:"indirect-write",level:2}],d={toc:s},c="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"bigquery"},"BigQuery"),(0,n.kt)("p",null,"User can use BigQuery persistence to write/persist spark dataframe to google cloud BigQuery table."),(0,n.kt)("p",null,"There are two ways to write the dataframe to BigQuery table:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Direct Write"),(0,n.kt)("li",{parentName:"ul"},"Indirect Write")),(0,n.kt)("p",null,"You can read about the difference between these two\napproaches ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/GoogleCloudDataproc/spark-bigquery-connector#writing-data-to-bigquery"},"here"),"."),(0,n.kt)("h2",{id:"direct-write"},"Direct Write"),(0,n.kt)("p",null,"User can configure the BigQuery persistence using direct write approach in the below manner:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hocon"},'persistence = {\n    type = "BigQuery"\n    service-account-credentials-file = "/Users/xyz/Downloads/creds-file.json"\n    table = "project-name:dataset-name.table-name"\n    writer-type = {\n        type = "DirectBigQueryWriterType"\n        http-connect-timeout = 5000\n    }\n}\n')),(0,n.kt)("p",null,"Apart from ",(0,n.kt)("inlineCode",{parentName:"p"},"http-connect-timeout"),", user can configure below other parameters in the writer-type:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter Name"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"big-query-table-label"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Empty List"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Can be used to add labels to the table while writing to a table. Multiple labels can be set.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"clustered-fields"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"A string of non-repeated, top-level columns separated by a comma.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"create-disposition"),(0,n.kt)("td",{parentName:"tr",align:"center"},"CREATE_IF_NEEDED"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Specifies whether the job is allowed to create new tables. The permitted values are:",(0,n.kt)("br",null),"CREATE_IF_NEEDED - Configures the job to create the table if it does not exist",(0,n.kt)("br",null),"CREATE_NEVER - Configures the job to fail if the table does not exist ",(0,n.kt)("br",null),"This option takes place only in case Spark has decided to write data to the table based on the SaveMode.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"datetime-zone-id"),(0,n.kt)("td",{parentName:"tr",align:"center"},"UTC"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The time zone ID used to convert BigQuery's DATETIME into Spark's Timestamp, and vice versa.",(0,n.kt)("br",null),"The value should be a legal time zone name, that appears is accepted by Java's java.time.ZoneId.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"destination-table-kms-key-name"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Describes the Cloud KMS encryption key that will be used to protect the destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. For further Information about using CMEK with BigQuery see ",(0,n.kt)("a",{parentName:"td",href:"https://cloud.google.com/bigquery/docs/customer-managed-encryption#key_resource_id"},"here"),".",(0,n.kt)("br",null),"The table will be encrypted by the key only if it created by the connector. A pre-existing unencrypted table won't be encrypted just by setting this option.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"enable-list-inference"),(0,n.kt)("td",{parentName:"tr",align:"center"},"false"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Indicates whether to use schema inference specifically when the mode is Parquet.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"enable-mode-check-for-schema-fields"),(0,n.kt)("td",{parentName:"tr",align:"center"},"true"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Checks the mode of every field in the destination schema to be equal to the mode in corresponding source field schema, during DIRECT write.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"http-connect-timeout"),(0,n.kt)("td",{parentName:"tr",align:"center"},"6000"),(0,n.kt)("td",{parentName:"tr",align:"left"},'The timeout in milliseconds to establish a connection with BigQuery. Can be alternatively set in the Spark configuration (spark.conf.set("httpConnectTimeout", ...)) or in Hadoop Configuration (fs.gs.http.connect-timeout).')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"http-max-retry"),(0,n.kt)("td",{parentName:"tr",align:"center"},"10"),(0,n.kt)("td",{parentName:"tr",align:"left"},'The maximum number of retries for the low-level HTTP requests to BigQuery. Can be alternatively set in the Spark configuration (spark.conf.set("httpMaxRetry", ...)) or in Hadoop Configuration (fs.gs.http.max.retry).')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"proxy-address"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Address of the proxy server. The proxy must be an HTTP proxy, and the address should be in the ",(0,n.kt)("inlineCode",{parentName:"td"},"host:port")," format. Can be alternatively set in the Spark configuration (spark.conf.set(...)) or in Hadoop Configuration (fs.gs.proxy.address).",(0,n.kt)("br",null),"(Optional. Required only if connecting to GCP via proxy.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"proxy-username"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The userName used to connect to the proxy. Can be alternatively set in the Spark configuration (spark.conf.set(...)) or in Hadoop Configuration (fs.gs.proxy.username).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"proxy-password"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The password used to connect to the proxy. Can be alternatively set in the Spark configuration (spark.conf.set(...)) or in Hadoop Configuration (fs.gs.proxy.password).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"query-job-priority"),(0,n.kt)("td",{parentName:"tr",align:"center"},"INTERACTIVE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Priority levels set for the job while reading data from BigQuery query. The permitted values are:",(0,n.kt)("br",null),"BATCH - Query is queued and started as soon as idle resources are available, usually within a few minutes. If the query hasn't started within 3 hours, its priority is changed to INTERACTIVE.",(0,n.kt)("br",null),"INTERACTIVE - Query is executed as soon as possible and counts towards the concurrent rate limit and the daily rate limit.",(0,n.kt)("br",null),"For WRITE, this option will be effective when DIRECT write is used with OVERWRITE mode, where the connector overwrites the destination table using MERGE statement.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"write-at-least-once"),(0,n.kt)("td",{parentName:"tr",align:"center"},"false"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Guarantees that data is written to BigQuery at least once. This is a lesser guarantee than exactly once. This is suitable for streaming scenarios in which data is continuously being written in small batches.",(0,n.kt)("br",null),"Supported only by the ",(0,n.kt)("inlineCode",{parentName:"td"},"DIRECT")," write method and mode is NOT ",(0,n.kt)("inlineCode",{parentName:"td"},"Overwrite"),".")))),(0,n.kt)("h2",{id:"indirect-write"},"Indirect Write"),(0,n.kt)("p",null,"User can configure the BigQuery persistence using indirect write approach in the below manner:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-hocon"},'persistence = {\n    type = "BigQuery"\n    service-account-credentials-file = "/Users/xyz/Downloads/creds-file.json"\n    table = "project-name:dataset-name.table-name"\n    writer-type = {\n        type = "IndirectBigQueryWriterType"\n        temporary-gcs-bucket = "temp-bucket"\n    }\n}\n')),(0,n.kt)("p",null,"Apart from ",(0,n.kt)("inlineCode",{parentName:"p"},"temporary-gcs-bucket"),", user can configure below other parameters in the writer-type:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter Name"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"allow-field-addition"),(0,n.kt)("td",{parentName:"tr",align:"center"},"false"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Adds the ALLOW_FIELD_ADDITION SchemaUpdateOption to the BigQuery LoadJob. Allowed values are true and false.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"allow-field-relaxation"),(0,n.kt)("td",{parentName:"tr",align:"center"},"false"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Adds the ALLOW_FIELD_RELAXATION SchemaUpdateOption to the BigQuery LoadJob. Allowed values are true and false.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"big-query-table-label"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Empty List"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Can be used to add labels to the table while writing to a table. Multiple labels can be set.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"clustered-fields"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"A string of non-repeated, top-level columns separated by a comma.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"create-disposition"),(0,n.kt)("td",{parentName:"tr",align:"center"},"CREATE_IF_NEEDED"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Specifies whether the job is allowed to create new tables. The permitted values are:",(0,n.kt)("br",null),"CREATE_IF_NEEDED - Configures the job to create the table if it does not exist",(0,n.kt)("br",null),"CREATE_NEVER - Configures the job to fail if the table does not exist ",(0,n.kt)("br",null),"This option takes place only in case Spark has decided to write data to the table based on the SaveMode.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"datetime-zone-id"),(0,n.kt)("td",{parentName:"tr",align:"center"},"UTC"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The time zone ID used to convert BigQuery's DATETIME into Spark's Timestamp, and vice versa.",(0,n.kt)("br",null),"The value should be a legal time zone name, that appears is accepted by Java's java.time.ZoneId.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"date-partition"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The date partition the data is going to be written to. Should be a date string given in the format YYYYMMDD. Can be used to overwrite the data of a single partition.",(0,n.kt)("br",null),"Can also be used with different partition types like:",(0,n.kt)("br",null),"HOUR: YYYYMMDDHH",(0,n.kt)("br",null),"MONTH: YYYYMM",(0,n.kt)("br",null),"YEAR: YYYY")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"destination-table-kms-key-name"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Describes the Cloud KMS encryption key that will be used to protect the destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. for further Information about using CMEK with BigQuery see ",(0,n.kt)("a",{parentName:"td",href:"https://cloud.google.com/bigquery/docs/customer-managed-encryption#key_resource_id"},"here"),".",(0,n.kt)("br",null),"The table will be encrypted by the key only if it created by the connector. A pre-existing unencrypted table won't be encrypted just by setting this option.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"enable-list-inference"),(0,n.kt)("td",{parentName:"tr",align:"center"},"false"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Indicates whether to use schema inference specifically when the mode is Parquet.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"http-connect-timeout"),(0,n.kt)("td",{parentName:"tr",align:"center"},"6000"),(0,n.kt)("td",{parentName:"tr",align:"left"},'The timeout in milliseconds to establish a connection with BigQuery. Can be alternatively set in the Spark configuration (spark.conf.set("httpConnectTimeout", ...)) or in Hadoop Configuration (fs.gs.http.connect-timeout).')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"http-max-retry"),(0,n.kt)("td",{parentName:"tr",align:"center"},"10"),(0,n.kt)("td",{parentName:"tr",align:"left"},'The maximum number of retries for the low-level HTTP requests to BigQuery. Can be alternatively set in the Spark configuration (spark.conf.set("httpMaxRetry", ...)) or in Hadoop Configuration (fs.gs.http.max.retry).')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"intermediate-format"),(0,n.kt)("td",{parentName:"tr",align:"center"},"parquet"),(0,n.kt)("td",{parentName:"tr",align:"left"},'The format of the data before it is loaded to BigQuery, values can be either "parquet","orc" or "avro". In order to use the Avro format, the spark-avro package must be added in runtime.')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"partition-expiration-ms"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"partition-field"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"If field is specified together with ",(0,n.kt)("inlineCode",{parentName:"td"},"partition-type"),", the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. If the option is not set for a partitioned table, then the table will be partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"partition-type"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Supported types are: HOUR, DAY, MONTH, YEAR. This option is mandatory for a target table to be partitioned. (Optional. Defaults to DAY if PartitionField is specified).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"persistent-gcs-bucket"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The GCS bucket that holds the data before it is loaded to BigQuery. If informed, the data won't be deleted after write data into BigQuery.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"persistent-gcs-path"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The GCS path that holds the data before it is loaded to BigQuery. Used only with persistent-gcs-bucket.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"proxy-address"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Address of the proxy server. The proxy must be an HTTP proxy and address should be in the ",(0,n.kt)("inlineCode",{parentName:"td"},"host:port")," format. Can be alternatively set in the Spark configuration (spark.conf.set(...)) or in Hadoop Configuration (fs.gs.proxy.address).",(0,n.kt)("br",null),"(Optional. Required only if connecting to GCP via proxy.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"proxy-username"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The userName used to connect to the proxy. Can be alternatively set in the Spark configuration (spark.conf.set(...)) or in Hadoop Configuration (fs.gs.proxy.username).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"proxy-password"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The password used to connect to the proxy. Can be alternatively set in the Spark configuration (spark.conf.set(...)) or in Hadoop Configuration (fs.gs.proxy.password).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary-gcs-bucket"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The GCS bucket that temporarily holds the data before it is loaded to BigQuery. Required unless set in the Spark configuration (spark.conf.set(...)).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"use-avro-logical-types"),(0,n.kt)("td",{parentName:"tr",align:"center"},"false"),(0,n.kt)("td",{parentName:"tr",align:"left"},"When loading from Avro (",(0,n.kt)("inlineCode",{parentName:"td"},'.option("intermediateFormat", "avro")'),"), BigQuery uses the underlying Avro types instead of the logical types ","[by default]",".  Supplying this option converts Avro logical types to their corresponding BigQuery data types.")))),(0,n.kt)("p",null,"Irrespective of the direct or indirect write approach, the ",(0,n.kt)("inlineCode",{parentName:"p"},"BigQuery")," persistence needs below arguments from the user:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter Name"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Mandatory"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"table"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The name of big query table in the format ",(0,n.kt)("inlineCode",{parentName:"td"},"[[project:]dataset.]table")," where dataframe needs to be persisted.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"service-account-credentials-file"),(0,n.kt)("td",{parentName:"tr",align:"center"},"No"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The filepath of the GCP service account credentials.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"dataset"),(0,n.kt)("td",{parentName:"tr",align:"center"},"No"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The dataset containing the table. If you are providing fully qualified name in ",(0,n.kt)("inlineCode",{parentName:"td"},"table")," parameter, then you can ignore this option.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"project"),(0,n.kt)("td",{parentName:"tr",align:"center"},"No"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The Google Cloud Project ID of the table.",(0,n.kt)("br",null),"(Optional. Defaults to the project of the Service Account being used)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"parent-project"),(0,n.kt)("td",{parentName:"tr",align:"center"},"No"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The Google Cloud Project ID of the table to bill for the export.",(0,n.kt)("br",null),"(Optional. Defaults to the project of the Service Account being used).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"save-mode"),(0,n.kt)("td",{parentName:"tr",align:"center"},"No"),(0,n.kt)("td",{parentName:"tr",align:"center"},"ErrorIfExists"),(0,n.kt)("td",{parentName:"tr",align:"left"},"This is used to specify the expected behavior of saving a DataFrame to a data source.",(0,n.kt)("br",null)," Expected values are (append, overwrite, errorifexists, ignore)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"writer-type"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,n.kt)("td",{parentName:"tr",align:"center"},"None"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The instance of direct or indirect big query writer type.")))),(0,n.kt)("p",null,"Also, note that for writing to the BigQuery it is necessary to have below privileges to the user:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Role Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Purpose"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"roles/bigquery.dataEditor"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Access BigQuery Tables")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"roles/bigquery.jobUser"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Create and query BigQuery tables")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"roles/storage.objectViewer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"To list and read GCS contents")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"roles/storage.objectCreator"),(0,n.kt)("td",{parentName:"tr",align:"left"},"To create folders in GCS")))))}m.isMDXComponent=!0}}]);